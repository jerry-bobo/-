class Node(object):
    def __init__(self, val, p=0):
        self.data = val
        self.next = p

class LinkList(object):
    def __init__(self):
        self.head = 0

    def __getitem__(self, item):
        if self.is_empty():
            print("linklist is empty")
            return
        elif item < 0 or item > self.getlength():
            print("the given item is error")
            return
        else:
            return self.getitem(item)

    def __setitem__(self, key, value):
        if self.is_empty():
            print("linklist is empty")
            return
        elif key < 0 or key > self.getlength():
            print("the given item is error")
            return
        else:
            self.delete(key)
            return self.insert(key)

    def initlist(self, data):
        self.head = Node(data[0])
        p = self.head
        for i in data[1:]:
            node = Node(i)
            p.next = node
            p = p.next

    def getlength(self):
        p = self.head
        length = 0
        while p != 0:
            length += 1
            p = p.next
        return length

    def is_empty(self):
        if self.getlength() == 0:
            return True
        else:
            return False

    def clear(self):
        self.head = 0

    def append(self, item):
        q = Node(item)
        if self.head == 0:
            self.head = q
        else:
            p = self.head
            while p.next != 0:
                p = p.next
            p.next = q

    def getitem(self, index):
        if self.is_empty():
            print('Linklist is empty.')
            return
        j = 0
        p = self.head
        while p.next != 0 and j < index:
            p = p.next
            j += 1
        if j == index:
            return p.data
        else:
            print("target is not exist")

    def insert(self, index, item):
        if self.is_empty() or index < 0 or index > self.getlength():
            print('Linklist is empty.')
            return
        if index == 0:
            q = Node(item, self.head)
            self.head = q
        p = self.head
        post = self.head
        j = 0
        while p.next != 0 and j < index:
            post = p
            p = p.next
            j += 1
        if j == index:
            q = Node(item, p)
            post.next = q
            q.next = p

    def delete(self, index, item):
        if self.is_empty():
            print('Linklist is empty.')
            return
        if index == 0:
            q = Node(item, self.head)
            self.head = q
        p = self.head
        post = self.head
        j = 0
        while p.next != 0 and j < index:
            post = p
            p = p.next
            j += 1

        if index == j:
            post.next = p.next

    def index(self, value):

        if self.is_empty():
            print('Linklist is empty.')
            return

        p = self.head
        i = 0
        while p.next != 0 and not p.data == value:
            p = p.next
            i += 1

        if p.data == value:
            return i
        else:
            return -1
-----------------双向--------------------
class Node(object):

   def __init__(self, data):

       # 定义数据域

       self.data = data

       # 定义后指向域

       self.next = None

       # 定义前指向域

       self.prev = None

 

 

# 定义双向链表类

class Double_List(object):

   def __init__(self):

       # 定义链表头

       self._head = Node(None)

       # 定义链表长度

       self._length = 0

 

   def is_empty(self):

       if self._length == 0:

           return True

       else:

           return False

 

    #循环遍历节点

   def travel(self):

       # 定义游标

       cur = self._head

       for i in range(self._length):

           print(cur.next.data, end=" ")

           cur = cur.next

       else:

           print(" ")

 

    #尾部添加节点

   def append(self, data):

       # 构造新节点

       new_code = Node(data)

       # 创建游标

       cur = self._head

       for i in range(self._length):

           # 移动游标

           cur = cur.next

       else:

           # 插入新节点：

           # 1.让新节点有所指向

           new_code.prev = cur

           # 2.让与新节点有关的节点有所指向

           cur.next = new_code

           # 链表长度加1

           self._length += 1

 

   def insert(self, pos, data):

       # 判断pos有效性

       if isinstance(pos, int):

           if pos < 0:

                dl.insert(0, data)

           elif pos > self._length:

                dl.append(data)

           else:

                # 创建新节点

                new_code = Node(data)

                # 创建游标

                cur = self._head

                for i in range(self._length):

                    if i == pos:

                        # 插入新节点：

                        # 1.让新节点有所指向

                        new_code.prev = cur

                        new_code.next =cur.next

                        # 2.让与新节点有关的节点有所指向

                        cur.next = new_code

                        new_code.next.prev =new_code

                        # 链表长度更新

                        self._length += 1

                        return

                    else:

                        cur = cur.next

       else:

           print("pos数据无效！")

 

   def remove(self, data):

       if self.is_empty():

           print("list is empty")

       else:

           cur = self._head

           for i in range(self._length):

                if cur.next.data == data:

                    if cur.next.next is None:

                        # 尾部节点删除

                        cur.next = None

                    else:

                        # 删除中间节点

                        # 1.让中间节点前的节点的next指向中间节点的后节点

                        cur.next = cur.next.next

                        # 2.让中间节点后的节点的prev指向中间节点的前节点

                        cur.next.prev = cur

                        # 更新链表长度

                    self._length -= 1

                    return

                else:

                    cur = cur.next

           else:

                print("{} is not in".format(data), end=""


